dubbo:
  scan:
    base-packages: com.idp.contract.dubbo.service
  protocol:
    name: dubbo
    port: -1
  registry:
    address: spring-cloud://localhost
  application:
    qos:
      port: 33333

spring:
  main:
    allow-bean-definition-overriding: true
  datasource: 
    name: testDatasource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${spring.datasource.url}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
    # druid连接池
    type: com.alibaba.druid.pool.DruidDataSource
    filters: stat
    maxActive: 20
    initialSize: 1
    maxWait: 60000
    minIdle: 1
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
  redis:
    cluster:
      nodes: ${spring.redis.cluster.nodes}
    #连接池最大连接数（使用负值表示没有限制） 
    pool:
      max-active: 100
    #连接池最大阻塞等待时间（使用负值表示没有限制） 
      max-wait: -1
    #连接池中的最大空闲连接 
      max-idle: 40
    #连接池中的最小空闲连接 
      min-idle: 20
    #连接超时时间（毫秒） 
    timeout: 60000

mybatis:
  # 是否检测MyBatis运行参数配置文件
  check-config-location: true
  # 注册XML映射器
  mapper-locations: classpath:/mapper/**/*.xml
  # 配置Java类型包名            
  type-aliases-package: com.idp.contract.po               
  configuration:
    default-fetch-size: 20
    default-statement-timeout: 30
  #type-handlers-package: test.springboot.handlers         #自定义类型转换器
  #executor-type: SIMPLE                                   # 指定执行器类型

tx-lcn:
  client:
  manager-address: ${tx-lcn.client.manager-address}
  springcloud:
    loadbalance:
      enabled:true
#关闭业务调用失败重试
ribbon:
  MaxAutoRetriesNextServer:0